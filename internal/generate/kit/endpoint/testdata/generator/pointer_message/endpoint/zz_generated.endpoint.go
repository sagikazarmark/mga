//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2020 Acme Inc.
// All rights reserved.
//
// Licensed under "Only for testing purposes" license.

// Code generated by mga tool. DO NOT EDIT.

package pkgdriver

import (
	"context"
	"errors"
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"sagikazarmark.dev/mga/internal/generate/kit/endpoint/testdata/generator/pointer_message"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	RegisterUser endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service pointer_message.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{RegisterUser: kitxendpoint.OperationNameMiddleware("pointer_message.RegisterUser")(mw(MakeRegisterUserEndpoint(service)))}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{RegisterUser: kitoc.TraceEndpoint("pointer_message.RegisterUser")(endpoints.RegisterUser)}
}

// RegisterUserRequest is a request struct for RegisterUser endpoint.
type RegisterUserRequest struct {
	User         pointer_message.User
	TrackingInfo *pointer_message.TrackingInfo
}

// RegisterUserResponse is a response struct for RegisterUser endpoint.
type RegisterUserResponse struct {
	RegisteredUser *pointer_message.User
	R1             string
	R2             string
	Err            error
}

func (r RegisterUserResponse) Failed() error {
	return r.Err
}

// MakeRegisterUserEndpoint returns an endpoint for the matching method of the underlying service.
func MakeRegisterUserEndpoint(service pointer_message.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(RegisterUserRequest)

		registeredUser, r1, r2, err := service.RegisterUser(ctx, req.User, req.TrackingInfo)

		if err != nil {
			if endpointErr := endpointError(nil); errors.As(err, &endpointErr) && endpointErr.EndpointError() {
				return RegisterUserResponse{
					Err:            err,
					R1:             r1,
					R2:             r2,
					RegisteredUser: registeredUser,
				}, err
			}

			return RegisterUserResponse{
				Err:            err,
				R1:             r1,
				R2:             r2,
				RegisteredUser: registeredUser,
			}, nil
		}

		return RegisterUserResponse{
			R1:             r1,
			R2:             r2,
			RegisteredUser: registeredUser,
		}, nil
	}
}
