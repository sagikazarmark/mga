package dispatcher

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"sagikazarmark.dev/mga/pkg/gentypes"
)

func TestGenerate(t *testing.T) {
	file := File{
		File: gentypes.File{
			Package: gentypes.PackageRef{
				Name: "pkggen",
				Path: "app.dev/pkg/pkggen",
			},
			HeaderText: "",
		},
		EventDispatchers: []EventDispatcher{
			{
				Name: "",
				DispatcherMethods: []EventMethod{
					{
						Name: "MarkedAsDone",
						Event: gentypes.TypeRef{
							Name: "MarkedAsDone",
							Package: gentypes.PackageRef{
								Name: "pkg",
								Path: "app.dev/pkg",
							},
						},
						ReceivesContext: true,
						ReturnsError:    true,
					},
					{
						Name: "MarkedAsDone2",
						Event: gentypes.TypeRef{
							Name: "MarkedAsDone2",
							Package: gentypes.PackageRef{
								Name: "pkg",
								Path: "app.dev/pkg",
							},
						},
						ReceivesContext: false,
						ReturnsError:    true,
					},
					{
						Name: "MarkedAsDone3",
						Event: gentypes.TypeRef{
							Name: "MarkedAsDone3",
							Package: gentypes.PackageRef{
								Name: "pkg",
								Path: "app.dev/pkg",
							},
						},
						ReceivesContext: true,
						ReturnsError:    false,
					},
				},
			},
		},
	}

	expected := `//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package pkggen

import (
	"app.dev/pkg"
	"context"
	"emperror.dev/errors"
)

// EventBus is a generic event bus.
type EventBus interface {
	// Publish sends an event to the underlying message bus.
	Publish(ctx context.Context, event interface{}) error
}

// EventDispatcher dispatches events through the underlying generic event bus.
type EventDispatcher struct {
	bus EventBus
}

// NewEventDispatcher returns a new EventDispatcher instance.
func NewEventDispatcher(bus EventBus) EventDispatcher {
	return EventDispatcher{bus: bus}
}

// MarkedAsDone dispatches a(n) MarkedAsDone event.
func (d EventDispatcher) MarkedAsDone(ctx context.Context, event pkg.MarkedAsDone) error {
	err := d.bus.Publish(ctx, event)
	if err != nil {
		return errors.WithDetails(errors.WithMessage(err, "failed to dispatch event"), "event", "MarkedAsDone")
	}

	return nil
}

// MarkedAsDone2 dispatches a(n) MarkedAsDone2 event.
func (d EventDispatcher) MarkedAsDone2(event pkg.MarkedAsDone2) error {
	ctx := context.Background()
	err := d.bus.Publish(ctx, event)
	if err != nil {
		return errors.WithDetails(errors.WithMessage(err, "failed to dispatch event"), "event", "MarkedAsDone2")
	}

	return nil
}

// MarkedAsDone3 dispatches a(n) MarkedAsDone3 event.
func (d EventDispatcher) MarkedAsDone3(ctx context.Context, event pkg.MarkedAsDone3) {
	_ = d.bus.Publish(ctx, event)
}
`

	actual, err := Generate(file)
	require.NoError(t, err)

	assert.Equal(t, expected, string(actual), "the generated code does not match the expected one")
}
